{"version":3,"sources":["common/components/Link/index.tsx","common/components/DateTime/index.tsx","common/types.ts","common/components/DataGrid/HeaderCol.tsx","common/components/DataGrid/index.tsx","common/components/NavBar/styled.tsx","common/components/NavBar/index.tsx","common/components/Layout/index.tsx","common/context.tsx","common/components/FormFields/Input/index.tsx","common/components/FormFields/validation.ts","resources/dictionaries/views/List/CreateDictionary/index.tsx","resources/dictionaries/views/List/index.tsx","resources/dictionaries/views/Details/styled.ts","resources/dictionaries/views/Details/index.tsx","App.tsx","index.tsx"],"names":["styled","Link","themeGet","DateTime","timestamp","format","Cipher","CipherMode","PaddingMode","KeyState","SortDirection","Col","Grid","isSortable","css","HeaderCol","children","cols","onSort","useState","None","sort","setSort","handleSort","useCallback","setDir","dir","ASC","DESC","pt","pb","onClick","Text","fontWeight","ver","HeaderRow","Row","wordWrap","DataCol","color","DataRow","TabBarWrapper","Box","UserNameBox","TextBox","NavBar","mb","Flex","m","width","flex","TabBar","Item","to","mr","mt","Layout","ml","initState","1234567890000","id","name","data","DataContext","React","createContext","add","remove","edit","DataProvider","setData","item","dic","Provider","value","useDataContext","useContext","InputField","input","placeholder","meta","disabled","Input","onChange","error","touched","pipeValidators","validators","allValues","reduce","validator","undefined","required","customMessage","isEmpty","Array","isArray","length","sameExists","froms","map","from","includes","CreateDictionary","onCancel","onSubmit","onSubmitCallback","Date","now","bg","radius","elevation","ELEVATIONS","Higher","maxWidth","p","my","mx","initialValues","render","handleSubmit","submitError","component","validate","Button","size","variant","type","DictionaryListView","isModalOpen","openModal","deleted","setDeleted","items","justifyContent","Object","keys","key","parseInt","Modal","isOpen","TransitionSlideDown","in","offset","HiddenFormButton","button","Drow","DictionaryView","useParams","dictionaries","isValidated","setIsValidated","rows","f","isValid","className","filter","form","setTimeout","reset","App","theme","DefaultTheme","path","exact","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.92cfff78.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { themeGet } from 'styled-system'\n\nexport default styled(Link)`\n  text-decoration: none;\n  color: ${themeGet('colors.primary')};\n`\n","import React from 'react'\nimport { format } from 'date-fns'\n\ntype Props = {\n  timestamp: number\n}\n\nexport const DateTime: React.FC<Props> = ({ timestamp }) => (\n  <>{format(timestamp, 'yyyy-MM-dd HH:mm:ss')}</>\n)\n","export enum Cipher {\n  AES = 'AES',\n  TDES = 'TDES',\n}\n\nexport enum CipherMode {\n  ECB = 'ECB',\n  CBC = 'CBC',\n}\n\nexport enum PaddingMode {\n  NoPadding = 'NO_PADDING',\n  ZeroBytePadding = 'ZERO_BYTE_PADDING',\n  PKCS7Padding = 'PKCS7_PADDING',\n}\n\nexport enum KeyState {\n  Active = 'ACTIVE',\n  Rotated = 'ROTATED',\n}\n\nexport type ResourceList<T> = {\n  collection: T[]\n  count: number\n}\n\nexport type Params = Record<string, any>\n\nexport enum SortDirection {\n  ASC,\n  DESC,\n  None,\n}\n","import React, { useCallback, useState } from 'react'\nimport { ColProps, Grid, TextBox } from '@revolut/ui-kit'\nimport { ShevronDown, ShevronUp } from '@revolut/icons'\nimport styled, { css } from 'styled-components'\nimport { SortDirection } from 'common/types'\n\nconst Col = styled(Grid.Col)<{\n  isSortable: boolean\n}>`\n  display: flex;\n  align-items: center;\n  ${({ isSortable }) =>\n    isSortable &&\n    css`\n      cursor: pointer;\n    `}\n`\n\nexport const HeaderCol: React.FC<ColProps> = ({ children, cols, onSort }) => {\n  const [sort, setSort] = useState<SortDirection>(SortDirection.None)\n  const handleSort = useCallback(() => {\n    if (!onSort) return\n    const setDir = (dir: SortDirection) => {\n      setSort(dir)\n      onSort(dir)\n    }\n    switch (sort) {\n      case SortDirection.ASC:\n        setDir(SortDirection.None)\n        break\n      case SortDirection.DESC:\n        setDir(SortDirection.ASC)\n        break\n      case SortDirection.None:\n        setDir(SortDirection.DESC)\n    }\n  }, [onSort, sort])\n  return (\n    <Col cols={cols} pt={1} pb={1} onClick={handleSort} isSortable={onSort}>\n      <TextBox fontWeight={800} ver>\n        {children}\n      </TextBox>\n      {sort === SortDirection.DESC && <ShevronDown />}\n      {sort === SortDirection.ASC && <ShevronUp />}\n    </Col>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Grid, ColProps } from '@revolut/ui-kit'\nimport { themeGet } from 'styled-system'\n\nexport * from './HeaderCol'\n\nexport const HeaderRow = styled(Grid.Row)`\n  border-bottom: 1px solid ${themeGet('colors.grey-50')};\n`\n\nexport const DataCol: React.FC<ColProps> = ({ children, cols, wordWrap, color }) => {\n  return (\n    <Grid.Col\n      cols={cols}\n      pt={1}\n      pb={1}\n      color={color}\n      css={{ wordWrap: wordWrap ? 'break-word' : 'normal' }}\n    >\n      {children}\n    </Grid.Col>\n  )\n}\n\nexport const DataRow = styled(Grid.Row)`\n  border-bottom: 1px solid ${themeGet('colors.grey-90')};\n  :nth-child(odd) {\n    background-color: ${themeGet('colors.grey-95')};\n  }\n  :hover {\n    background-color: ${themeGet('colors.grey-90')};\n  }\n`\n","import styled from 'styled-components'\nimport { themeGet } from 'styled-system'\nimport { Box, TextBox } from '@revolut/ui-kit'\n\nexport const TabBarWrapper = styled(Box)`\n  border-bottom: 1px solid ${themeGet('colors.grey-80')};\n`\n\nexport const UserNameBox = styled(TextBox)`\n  white-space: nowrap;\n`\n","import React from 'react'\nimport { TabBar, Flex, Box } from '@revolut/ui-kit'\nimport { TabBarWrapper, UserNameBox } from './styled'\n\nconst NavBar: React.FC = () => (\n  <TabBarWrapper mb={3}>\n    <Flex m=\"0 auto\" width=\"1280px\">\n      <Box flex=\"1\">\n        <TabBar>\n          <TabBar.Item to=\"/dictionaries\">Home</TabBar.Item>\n        </TabBar>\n      </Box>\n      <Flex>\n        <UserNameBox mr={2} mt={2}>\n          John Doe\n        </UserNameBox>\n      </Flex>\n    </Flex>\n  </TabBarWrapper>\n)\n\nexport default NavBar\n","import React from 'react'\nimport { Box } from '@revolut/ui-kit'\nimport NavBar from 'common/components/NavBar'\n\nconst Layout: React.FC = ({ children }) => {\n  return (\n    <>\n      <Box ml=\"2\" mr=\"2\">\n        <NavBar />\n      </Box>\n      <Box ml=\"2\" mr=\"2\">\n        <Box m=\"0 auto\" width=\"1280px\" pb={2}>\n          {children}\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport default Layout\n","import React, { FC, useContext, useState, useCallback } from 'react'\nimport { noop, omit } from 'lodash'\n\ntype Dictionary = {\n  id: string\n  name: string\n  data: string[][]\n}\n\ntype DataType = Record<string, Dictionary>\n\nconst initState = {\n  1234567890000: {\n    id: '1234567890000',\n    name: 'Test',\n    data: [\n      ['ph', 'Biology'],\n      ['Atoms', 'Chemistry'],\n      ['Circuit Building', 'Physics'],\n      ['ph', 'Pharmacy'],\n    ],\n  },\n}\n\nconst DataContext = React.createContext<{\n  data: DataType\n  add: (data: Dictionary) => void\n  remove: (id: string) => void\n  edit: (id: string, dic: any[]) => void\n}>({\n  data: initState,\n  add: noop,\n  remove: noop,\n  edit: noop,\n})\n\nexport const DataProvider: FC = ({ children }) => {\n  const [data, setData] = useState<DataType>(initState)\n\n  const add = useCallback(\n    (item: Dictionary) =>\n      setData({\n        [item.id]: item,\n        ...data,\n      }),\n    [data],\n  )\n\n  const remove = useCallback(\n    (id: string) => {\n      setData(omit(data, id))\n    },\n    [data],\n  )\n\n  const edit = useCallback(\n    (id: string, dic) => {\n      setData({\n        ...data,\n        [id]: {\n          ...data[id],\n          data: dic,\n        },\n      })\n    },\n    [data],\n  )\n\n  return (\n    <DataContext.Provider\n      value={{\n        data,\n        add,\n        remove,\n        edit,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  )\n}\n\nexport const useDataContext = () => {\n  return useContext(DataContext)\n}\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form'\nimport { Input } from '@revolut/ui-kit'\n\ntype Props = {\n  placeholder?: string\n  disabled?: boolean\n} & FieldRenderProps<string, HTMLElement>\n\nconst InputField: React.FC<Props> = ({ input, placeholder, meta, disabled }) => {\n  return (\n    <Input\n      onChange={input.onChange}\n      error={meta.touched && meta.error}\n      placeholder={placeholder}\n      value={input.value}\n      disabled={disabled}\n    />\n  )\n}\n\nexport default InputField\n","export const pipeValidators = (...validators: any[] /** ValidatorFunction */) => (\n  value: any,\n  allValues?: any,\n) =>\n  validators.reduce((error, validator) => error || validator(value, allValues), undefined)\n\nexport const required = (customMessage: string = 'Required') => (value: any) => {\n  const isEmpty = !value || (Array.isArray(value) && !value.length)\n  return isEmpty ? customMessage : undefined\n}\n\nexport const sameExists = (dic: string[][]) => {\n  const froms = dic.map(([from]) => from)\n  return (from: string) => (froms.includes(from) ? 'Same entry exists' : undefined)\n}\n","import React, { useCallback } from 'react'\nimport { Form, Field } from 'react-final-form'\nimport { Box, H3, Flex, Button, TextBox, ELEVATIONS } from '@revolut/ui-kit'\nimport InputField from 'common/components/FormFields/Input'\nimport { required } from 'common/components/FormFields/validation'\n\ntype Props = {\n  onCancel: () => void\n  onSubmit: (item: any) => void\n}\n\ntype SubmitData = {\n  name: string\n}\n\nexport const CreateDictionary: React.FC<Props> = ({ onCancel, onSubmit }) => {\n  const onSubmitCallback = useCallback(\n    (data: SubmitData) =>\n      onSubmit({\n        id: Date.now(),\n        data: [],\n        ...data,\n      }),\n    [onSubmit],\n  )\n\n  return (\n    <Box\n      bg=\"white\"\n      radius=\"popup\"\n      elevation={ELEVATIONS.Higher}\n      maxWidth={600}\n      p={3}\n      my={3}\n      mx=\"auto\"\n    >\n      <H3>Create Dictionary</H3>\n      <Box mt={2}>\n        <Form\n          initialValues={{\n            name: '',\n          }}\n          onSubmit={onSubmitCallback}\n          render={({ handleSubmit, submitError }) => (\n            <form onSubmit={handleSubmit}>\n              <Field\n                name=\"name\"\n                component={InputField}\n                validate={required()}\n                placeholder=\"Name\"\n              />\n              {submitError && (\n                <TextBox color=\"error\" mt={2}>\n                  Submition Error: {submitError}\n                </TextBox>\n              )}\n\n              <Flex mt={5}>\n                <Button size=\"sm\" width=\"10rem\" variant=\"accent\" mr={2} type=\"submit\">\n                  Create\n                </Button>\n                <Button\n                  size=\"sm\"\n                  width=\"10rem\"\n                  variant=\"primary\"\n                  onClick={() => onCancel()}\n                >\n                  Cancel\n                </Button>\n              </Flex>\n            </form>\n          )}\n        />\n      </Box>\n    </Box>\n  )\n}\n\nexport default CreateDictionary\n","import React, { useState } from 'react'\nimport { Delete } from '@revolut/icons'\nimport {\n  Grid,\n  H3,\n  Box,\n  Button,\n  Flex,\n  Modal,\n  TransitionSlideDown,\n  ELEVATIONS,\n} from '@revolut/ui-kit'\nimport Link from 'common/components/Link'\nimport { DateTime } from 'common/components/DateTime'\nimport { HeaderRow, DataRow, HeaderCol, DataCol } from 'common/components/DataGrid'\n\nimport Layout from 'common/components/Layout'\nimport { useDataContext } from 'common/context'\nimport CreateDictionary from './CreateDictionary'\n\nconst DictionaryListView: React.FC = () => {\n  const [isModalOpen, openModal] = useState(false)\n  const [deleted, setDeleted] = useState()\n\n  const { data: items, add, remove } = useDataContext()\n\n  return (\n    <Layout>\n      <Flex justifyContent=\"space-between\">\n        <H3>Dictionaries</H3>\n        <Box width=\"14rem\">\n          <Button size=\"sm\" onClick={() => openModal(true)}>\n            Create Dictionary\n          </Button>\n        </Box>\n      </Flex>\n      <Box mt={2}>\n        <Grid>\n          <HeaderRow>\n            <HeaderCol cols={6}>Title</HeaderCol>\n            <HeaderCol cols={6}>Date</HeaderCol>\n          </HeaderRow>\n          {Object.keys(items) &&\n            Object.keys(items).map(key => (\n              <DataRow key={key}>\n                <DataCol cols={6}>\n                  <Link to={`/dictionaries/${key}`}>{items[key].name}</Link>\n                </DataCol>\n                <DataCol cols={5}>\n                  <DateTime timestamp={parseInt(key)} />\n                </DataCol>\n                <DataCol cols={1}>\n                  <Delete onClick={() => setDeleted(key)} />\n                </DataCol>\n              </DataRow>\n            ))}\n        </Grid>\n      </Box>\n      <Modal isOpen={!!deleted}>\n        <TransitionSlideDown in={!!deleted} offset={-100}>\n          <Box\n            bg=\"white\"\n            radius=\"popup\"\n            elevation={ELEVATIONS.Higher}\n            maxWidth={600}\n            p={3}\n            my={3}\n            mx=\"auto\"\n          >\n            <H3>Are you sure?</H3>\n            <Flex mt={5}>\n              <Button\n                size=\"sm\"\n                width=\"10rem\"\n                variant=\"accent\"\n                mr={2}\n                onClick={() => {\n                  remove(deleted)\n                  setDeleted(null)\n                }}\n              >\n                Delete\n              </Button>\n              <Button\n                size=\"sm\"\n                width=\"10rem\"\n                variant=\"primary\"\n                onClick={() => setDeleted(null)}\n              >\n                Cancel\n              </Button>\n            </Flex>\n          </Box>\n        </TransitionSlideDown>\n      </Modal>\n      <Modal isOpen={isModalOpen}>\n        <TransitionSlideDown in={isModalOpen} offset={-100}>\n          <CreateDictionary\n            onSubmit={item => {\n              add(item)\n              openModal(false)\n            }}\n            onCancel={() => openModal(false)}\n          />\n        </TransitionSlideDown>\n      </Modal>\n    </Layout>\n  )\n}\n\nexport default DictionaryListView\n","import styled from 'styled-components'\nimport { DataRow } from 'common/components/DataGrid'\n\nexport const HiddenFormButton = styled.button`\n  width: 0;\n  height: 0;\n  visibility: hidden;\n  position: absolute;\n`\n\nexport const Drow = styled(DataRow)`\n  & .delete {\n    display: none;\n  }\n  &:hover .delete {\n    display: block;\n  }\n`\n","import React, { useCallback, useState } from 'react'\nimport { useParams } from 'react-router'\nimport Layout from 'common/components/Layout'\nimport { useDataContext } from 'common/context'\nimport { Box, Button, Flex, Grid, H3 } from '@revolut/ui-kit'\nimport { DataCol, DataRow, HeaderCol, HeaderRow } from 'common/components/DataGrid'\nimport { Field, Form } from 'react-final-form'\nimport InputField from 'common/components/FormFields/Input'\nimport {\n  required,\n  sameExists,\n  pipeValidators,\n} from 'common/components/FormFields/validation'\nimport { Delete } from '@revolut/icons'\nimport { Drow, HiddenFormButton } from './styled'\n\nconst DictionaryView: React.FC = () => {\n  const { id } = useParams<{ id: string }>()\n  const { data: dictionaries, edit } = useDataContext()\n  const [isValidated, setIsValidated] = useState(false)\n\n  const dic = dictionaries[id]\n  const rows = dic.data\n\n  const froms = {}\n  for (const [f] of rows) {\n    if (!froms[f]) froms[f] = 1\n    else froms[f] += 1\n  }\n\n  const isValid = useCallback(\n    f => {\n      return !isValidated || froms[f] === 1\n    },\n    [froms, isValidated],\n  )\n  return (\n    <Layout>\n      <Flex justifyContent=\"space-between\">\n        <H3>Dictionary {dic.name}</H3>\n        <Box width=\"14rem\">\n          <Button size=\"sm\" onClick={() => setIsValidated(!isValidated)}>\n            Validate\n          </Button>\n        </Box>\n      </Flex>\n      <Box mt={2}>\n        <Grid>\n          <HeaderRow>\n            <HeaderCol cols={6}>From</HeaderCol>\n            <HeaderCol cols={6}>To</HeaderCol>\n          </HeaderRow>\n          {rows &&\n            rows.map(([from, to]) => (\n              <Drow key={from + to}>\n                <DataCol cols={6} color={isValid(from) ? 'black' : 'red'}>\n                  {from}\n                </DataCol>\n                <DataCol cols={5}>{to}</DataCol>\n                <DataCol cols={1}>\n                  <Delete\n                    className=\"delete\"\n                    onClick={() => {\n                      edit(id, dic.data.filter(([f]) => f !== from))\n                    }}\n                  />\n                </DataCol>\n              </Drow>\n            ))}\n          <Form\n            initialValues={{\n              from: '',\n              to: '',\n            }}\n            onSubmit={(data, form) => {\n              edit(id, [...dic.data, [data.from, data.to]])\n              setTimeout(form.reset)\n            }}\n            render={({ handleSubmit }) => (\n              <form onSubmit={handleSubmit}>\n                <DataRow>\n                  <DataCol cols={6}>\n                    <Field\n                      name=\"from\"\n                      component={InputField}\n                      validate={pipeValidators(required(), sameExists(dic.data))}\n                      placeholder=\"From\"\n                    />\n                  </DataCol>\n                  <DataCol cols={6}>\n                    <Field\n                      name=\"to\"\n                      component={InputField}\n                      validate={required()}\n                      placeholder=\"To\"\n                    />\n                  </DataCol>\n                </DataRow>\n                <HiddenFormButton type=\"submit\" />\n              </form>\n            )}\n          />\n        </Grid>\n      </Box>\n    </Layout>\n  )\n}\n\nexport default DictionaryView\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport { DefaultTheme } from '@revolut/ui-kit'\n\nimport DictionaryListView from './resources/dictionaries/views/List'\nimport { DataProvider } from './common/context'\nimport DictionaryView from './resources/dictionaries/views/Details'\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={DefaultTheme}>\n        <DataProvider>\n          <Switch>\n            <Route path=\"/dictionaries\" component={DictionaryListView} exact />\n            <Route path=\"/dictionaries/:id\" component={DictionaryView} exact />\n            <Redirect exact from=\"/\" to=\"/dictionaries\" />\n          </Switch>\n        </DataProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}